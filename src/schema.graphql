#type definition (schema)
#Scalar type (single discrete value): String, Boolean, Int, Float, ID(unique identifier, number will be convert to string)
# ! mean cannot return null value
# mutation can only use scalar data type

type Query {
  me: User!
  post: Post!
  greeting(name: String, position: String): String!
  grades: [Int!]!
  add(numbers: [Float!]!): Float!
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments(query: String): [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  createPost(data: createPostInput): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: updatePostInput!): Post!
  createComment(data: createCommentInput): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: updateCommentInput!): Comment!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input createPostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input updatePostInput {
  title: String
  body: String
  published: Boolean
}

input createCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input updateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}
